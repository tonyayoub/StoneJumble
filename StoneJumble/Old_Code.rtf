{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red170\green13\blue145;\red196\green26\blue22;
\red28\green0\blue207;\red92\green38\blue153;\red63\green110\blue116;\red38\green71\blue75;\red0\green116\blue0;
\red46\green13\blue110;\red170\green13\blue145;\red63\green110\blue116;\red38\green71\blue75;\red92\green38\blue153;
\red46\green13\blue110;\red196\green26\blue22;\red28\green0\blue207;\red0\green116\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c0\c45600\c0;
\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c66667\c5098\c56863;\csgenericrgb\c24706\c43137\c45490;\csgenericrgb\c14902\c27843\c29412;\csgenericrgb\c36078\c14902\c60000;
\csgenericrgb\c18039\c5098\c43137;\csgenericrgb\c76863\c10196\c8627;\csgenericrgb\c10980\c0\c81176;\csgenericrgb\c0\c45490\c0;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab642
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \CocoaLigature0     \cf3 func\cf2  shakeScene2()\
    \{\
        \cf3 if\cf2  noAnimation\
        \{\cf3 return\cf2 \};\
        \cf3 self\cf2 .childNode(withName: \cf4 "bg"\cf2 )?.run(SKAction.sequence([SKAction.scale(to: \cf5 1.005\cf2 , duration: \cf5 0.02\cf2 ), SKAction.scale(to: \cf5 1\cf2 , duration: \cf5 0.02\cf2 )]))\
        \cf3 let\cf2  dist1:\cf6 CGFloat\cf2  = \cf5 1\cf2 \
        \cf3 let\cf2  dist2:\cf6 CGFloat\cf2  = \cf5 2\cf2 \
        \
        \cf3 let\cf2  moveX_1 = SKAction.move(by: CGVector(dx: \cf5 -1\cf2  * dist1, dy: \cf5 0\cf2 ), duration: \cf5 0.02\cf2 )\
        \cf3 let\cf2  moveX_2 = SKAction.move(by: CGVector(dx: \cf5 -1\cf2  * dist2, dy: \cf5 0\cf2 ), duration: \cf5 0.02\cf2 )\
        \cf3 let\cf2  moveX_3 = SKAction.move(by: CGVector(dx: dist1, dy: \cf5 0\cf2 ), duration: \cf5 0.02\cf2 )\
        \cf3 let\cf2  moveX_4 = SKAction.move(by: CGVector(dx: dist2, dy: \cf5 0\cf2 ), duration: \cf5 0.02\cf2 )\
        \
        \cf3 let\cf2  moveY_1 = SKAction.move(by: CGVector(dx: \cf5 0\cf2 , dy: \cf5 -1\cf2  * dist1), duration: \cf5 0.02\cf2 )\
        \cf3 let\cf2  moveY_2 = SKAction.move(by: CGVector(dx: \cf5 0\cf2 ,dy: \cf5 -1\cf2  * dist2), duration: \cf5 0.02\cf2 )\
        \cf3 let\cf2  moveY_3 = SKAction.move(by: CGVector(dx: \cf5 0\cf2 ,dy: dist1), duration: \cf5 0.02\cf2 )\
        \cf3 let\cf2  moveY_4 = SKAction.move(by: CGVector(dx: \cf5 0\cf2 ,dy: dist2), duration: \cf5 0.02\cf2 )\
        \
        \cf3 let\cf2  trembleX = SKAction.sequence([moveX_1, moveX_4, moveX_2, moveX_3])\
        \cf3 let\cf2  trembleY = SKAction.sequence([moveY_1, moveY_4, moveY_2, moveY_3])\
        \
        \cf3 for\cf2  child \cf3 in\cf2  \cf3 self\cf2 .children\
        \{\
            \cf3 if\cf2  child \cf3 is\cf2  \cf6 Burger\cf2  || child \cf3 is\cf2  \cf6 Shooter\cf2 \
            \{\
                child.run(trembleX)\
                child.run(trembleY)\
            \}\
        \}\
    \}\
    \
    \
\
*******************
\f1 \cf0 \
\pard\tx626\pardeftab626\pardirnatural\partightenfactor0
\cf0 \
SJLevelCreator: \
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f0 \cf2     \cf3 class\cf2  \cf3 func\cf2  createObjects() -> \cf6 Bool\cf2 \
    \{\
        \cf7 SJDirector\cf2 .\cf7 shared\cf2 .\cf7 _targets\cf2  = [\cf7 Burger\cf2 ]()\
        \cf7 SJDirector\cf2 .\cf7 shared\cf2 .\cf7 _obstacles\cf2  = [\cf7 Obstacle\cf2 ]()\
        \cf3 do\cf2 \
        \{\
            \cf3 try\cf2  \cf8 parseLevelData\cf2 ()\
            \cf3 return\cf2  \cf3 true\cf2 ;\
        \}\
        \cf3 catch\cf2  \cf3 _\cf2 \
        \{\
            \cf9 //NPDirector.terminateMessage()\
\cf2             \cf3 return\cf2  \cf3 false\cf2 ;\
        \}\
\
        \cf9 //targets\{red:1,green:1\};obstacles\{wood:1,stone:2\};hits\{10\}\
\cf2         \cf3 let\cf2  objectTypesStrings = \cf8 getLevelString\cf2 (\cf7 NPDirector\cf2 .\cf7 shared\cf2 .\cf7 currentEpisodeID\cf2 , levelID: \cf7 NPDirector\cf2 .\cf7 shared\cf2 .\cf7 currentLevelID\cf2 ).\cf10 components\cf2 (separatedBy: \cf4 ";"\cf2 )\
        \cf3 for\cf2  oneObjectTypeString \cf3 in\cf2  objectTypesStrings \cf9 //targets\{red:1,green:1\}\
\cf2         \{\
\
            \cf3 let\cf2  separators = \cf6 CharacterSet\cf2 .\cf6 alphanumerics\cf2 \
            separators\
            \cf3 let\cf2  typeNameComponents = oneObjectTypeString.\cf10 components\cf2 (separatedBy: \cf6 CharacterSet\cf2 (charactersIn: \cf4 "\{\}"\cf2 ))\cf9 //"targets", "red:1,green:1"\
\cf2             \cf3 let\cf2  oneObjectTypeName = typeNameComponents[\cf5 0\cf2 ]\
            \cf3 let\cf2  oneObjectTypeComponenets = typeNameComponents[\cf5 1\cf2 ]\
            \
            \
            \cf3 switch\cf2  oneObjectTypeName\
            \{\
            \cf3 case\cf2  \cf4 "targets"\cf2 , \cf4 "obstacles"\cf2 :\
                \cf3 let\cf2  objectsSubStrings = oneObjectTypeComponenets.\cf10 components\cf2 (separatedBy: \cf4 ","\cf2 ) \cf9 // red:1:1    green:2:3    ..etc\
\cf2                 \cf3 for\cf2  oneObjectString \cf3 in\cf2  objectsSubStrings\
                \{\
                    \cf3 let\cf2  oneObjectSubStrings = oneObjectString.\cf10 components\cf2 (separatedBy: \cf4 ":"\cf2 )\
                    \cf3 let\cf2  oneObjectName = oneObjectSubStrings[\cf5 0\cf2 ]\
                    \cf3 let\cf2  oneObjectParsedStrength:\cf6 Int\cf2 ? = \cf6 Int\cf2 (oneObjectSubStrings[\cf5 1\cf2 ])\
                    \cf3 let\cf2  oneObjectParsedCount:\cf6 Int\cf2 ? = \cf6 Int\cf2 (oneObjectSubStrings[\cf5 2\cf2 ])\
\
                    \
                    \cf3 if\cf2  \cf3 let\cf2  oneObjectStrength = oneObjectParsedStrength, let oneObjectCount = oneObjectParsedCount\
                    \{\
\
                        \cf3 for\cf2  \cf3 _\cf2  \cf3 in\cf2  \cf5 1\cf2 ...oneObjectCount\
                        \{\
                            \cf3 if\cf2  oneObjectTypeName \cf10 ==\cf2  \cf4 "targets"\cf2 \
                            \{\
                                \cf3 if\cf2  \cf3 let\cf2  createdObject = \cf7 Burger\cf2 .\cf8 make\cf2 (oneObjectName, objectSpec: oneObjectStrength) \cf3 as\cf2 ? \cf7 Burger\cf2 \
                                \{\
                                    \cf7 SJDirector\cf2 .\cf7 shared\cf2 .\cf7 _targets\cf2 .\cf10 append\cf2 (createdObject)\
                                    \
                                \}\
                            \}\
                            \cf3 else\cf2  \cf3 if\cf2  oneObjectTypeName \cf10 ==\cf2  \cf4 "obstacles"\cf2 \
                            \{\
                                \cf3 if\cf2  \cf3 let\cf2  createdObject = \cf7 Obstacle\cf2 .\cf8 make\cf2 (oneObjectName, objectSpec: oneObjectStrength) \cf3 as\cf2 ? \cf7 Obstacle\cf2 \
                                \{\
                                    \cf7 SJDirector\cf2 .\cf7 shared\cf2 .\cf7 _obstacles\cf2 .\cf10 append\cf2 (createdObject)\
                                    \
                                \}\
                            \}\
                            \
                        \}\
                    \}\
                \}\
            \cf3 case\cf2  \cf4 "hits"\cf2 :\
                \cf7 SJDirector\cf2 .\cf7 shared\cf2 .\cf7 _hitsRemaining\cf2  = \cf6 Int\cf2 (oneObjectTypeComponenets)!\
\
                \
                \
            \cf3 default\cf2 :\
                \cf3 return\cf2  \cf3 false\cf2 ;\
            \}\
            \cf9 // from the string create the target objects, add them to the collections inside res\
\cf2         \}\
        \cf3 return\cf2  \cf3 true\cf2 \
    \}\
\
**************
\f1 \cf0 \
\pard\tx626\pardeftab626\pardirnatural\partightenfactor0
\cf0 \
Burger:\
\pard\tx626\pardeftab626\pardirnatural\partightenfactor0

\f0 \cf2     \cf3 func\cf2  calculatePartsWantedPosition()\
    \{\
        \cf3 if\cf2  \cf7 _strength\cf2  <= \cf5 1\cf2 \
        \{\
            \cf3 return\cf2 ;\
        \}\
        \cf3 var\cf2  partsAbove = [\cf7 BurgerPart\cf2 ]()\
        \cf3 var\cf2  partsBelow = [\cf7 BurgerPart\cf2 ]()\
        \
        \cf3 for\cf2  burgerPart \cf3 in\cf2  \cf8 getBurgerParts\cf2 ()\
        \{\
            \cf3 if\cf2  \cf3 self\cf2 .\cf7 strength\cf2  < burgerPart.\cf7 strength\cf2  \cf9 //this part is already shot away\
\cf2             \{\
                \cf3 continue\cf2 \
            \}\
            \
            \
            \cf3 if\cf2  burgerPart.\cf7 drawingOrder\cf2  > \cf5 0\cf2 \
            \{\
                partsAbove.\cf10 append\cf2 (burgerPart)\
            \}\
            \cf3 else\cf2  \cf3 if\cf2  burgerPart.\cf7 drawingOrder\cf2  < \cf5 0\cf2 \
            \{\
                partsBelow.\cf10 append\cf2 (burgerPart)\
            \}\
          \cf9 //  self.addChild(burgerPart)\
\cf2         \}\
        \
        partsAbove.\cf10 sortInPlace\cf2 (\{(p1: \cf7 BurgerPart\cf2 , p2: \cf7 BurgerPart\cf2 ) -> \cf6 Bool\cf2  \cf3 in\cf2 \
            \cf3 return\cf2  p1.\cf7 drawingOrder\cf2  < p2.\cf7 drawingOrder\cf2  \cf9 // in the parts above we sort from the burger upwards\
\cf2         \})\
        \
        partsBelow.\cf10 sortInPlace\cf2 (\{(p1: \cf7 BurgerPart\cf2 , p2: \cf7 BurgerPart\cf2 ) -> \cf6 Bool\cf2  \cf3 in\cf2 \
            \cf3 return\cf2  p1.\cf7 drawingOrder\cf2  > p2.\cf7 drawingOrder\cf2  \cf9 // in the parts below we sort from the burger downwards\
\cf2         \})\
        \
        \cf3 var\cf2  lastDrawnPart:\cf6 SKSpriteNode\cf2  = \cf3 self\cf2 \
        \cf3 var\cf2  lastDrawnY:\cf6 CGFloat\cf2  = \cf5 0\cf2 \
        \
        \cf3 for\cf2  part \cf3 in\cf2  partsAbove\
        \{\
            \
            \cf3 let\cf2  x:\cf6 CGFloat\cf2  = \cf5 0\cf2 \
            \cf3 var\cf2  yDiff:\cf6 CGFloat\cf2  = \cf5 0\cf2 \
            \
            \cf3 if\cf2 (lastDrawnPart == \cf3 self\cf2 ) \cf9 // putting the first part above burger\
\cf2             \{\
                part.\cf6 zPosition\cf2  = \cf5 1\cf2 \
                yDiff = \cf3 self\cf2 .\cf6 size\cf2 .\cf6 height\cf2  * \cf5 0.6\cf2  \cf9 // 0.6 is the vDisplacement of self\
\cf2                 \
            \}\
            \cf3 else\cf2 \
            \{\
                part.\cf6 zPosition\cf2  = lastDrawnPart.\cf6 zPosition\cf2  + \cf5 1\cf2 \
                yDiff = part.\cf6 size\cf2 .\cf6 height\cf2  * part.\cf7 vDisplacement\cf2 \
            \}\
            \cf3 let\cf2  y = lastDrawnY + lastDrawnPart.\cf6 size\cf2 .\cf6 height\cf2 /\cf5 2\cf2  + part.\cf6 size\cf2 .\cf6 height\cf2 /\cf5 2\cf2  - yDiff\
            part.\cf7 wantedPosition\cf2  = \cf10 CGPointMake\cf2 (x, y)\
            lastDrawnPart = part\
            lastDrawnY = part.\cf7 wantedPosition\cf2 .\cf6 y\cf2 \
            \
        \}\
        \
        lastDrawnPart = \cf3 self\cf2 \
        lastDrawnY = \cf5 0\cf2 \
        \
        \cf3 for\cf2  part \cf3 in\cf2  partsBelow\
        \{\
            \
            \
            \cf3 let\cf2  x:\cf6 CGFloat\cf2  = \cf5 0\cf2 \
            \cf3 let\cf2  yDiff = part.\cf6 size\cf2 .\cf6 height\cf2  * part.\cf7 vDisplacement\cf2  \cf9 //calculating the hidden part relative to the part newly put because i'm sorting from burger downwards. Remember: the hidden part always depends on the below part, and here the below part is the part currently being drawn\
\cf2             \cf9 //if yDiff = 0, there will be no overlap\
\cf2             \cf3 let\cf2  y = (lastDrawnY - lastDrawnPart.\cf6 size\cf2 .\cf6 height\cf2 /\cf5 2\cf2  - part.\cf6 size\cf2 .\cf6 height\cf2 /\cf5 2\cf2 ) + yDiff\
\
\
            part.\cf7 wantedPosition\cf2  = \cf10 CGPointMake\cf2 (x, y)\
            \cf3 if\cf2 (lastDrawnPart == \cf3 self\cf2 ) \cf9 // putting the first part below burger\
\cf2             \{\
                part.\cf6 zPosition\cf2  = -\cf5 1\cf2 \
            \}\
            \cf3 else\cf2 \
            \{\
                part.\cf6 zPosition\cf2  = lastDrawnPart.\cf6 zPosition\cf2  - \cf5 1\cf2 \
                \
            \}\
            \
            lastDrawnPart = part\
            lastDrawnY = part.\cf7 wantedPosition\cf2 .\cf6 y\cf2 \
        \}\
    \}\
    \
\
*********\cf0 \
\
Check all objects are centred over shooter before changing status to Firing and fire:\
\
        \cf11 if\cf0 (\cf12 _status\cf0  \cf13 ==\cf0  \cf12 LevelStatus\cf0 .\cf13 Collecting\cf0 )\
        \{\
            \cf11 var\cf0  allTargetsAreCentered = \cf11 true\cf0 \
\
            \cf11 for\cf0  node \cf11 in\cf0  \cf11 self\cf0 .\cf14 children\cf0 \
            \{\
                \cf11 if\cf0  node \cf11 is\cf0  \cf12 Target\cf0 \
                \{\
                    \cf11 if\cf0 (node.\cf14 position\cf0  != \cf12 _shooter\cf0 .\cf14 position\cf0 )\
                    \{\
                        allTargetsAreCentered = \cf11 false\cf0 \
                        \cf11 break\cf0 \
                    \}\
                \}\
            \}\
            \cf11 if\cf0 (allTargetsAreCentered)\
            \{\
                \cf15 // print\cf0 (\cf16 "all targets are cenetered now"\cf0 )\
                \cf12 _status\cf0  = .\cf13 Firing\cf0 \
                \cf13 fireObjects\cf0 ()\
            \}\
        \}\
\
\
************************************************\
Handle Pan in LevelScene \
\cf11 @IBAction\cf0  \cf11 func\cf0  handlePan(recognizer: \cf14 UIPanGestureRecognizer\cf0 )\
    \{\
        \cf11 let\cf0  viewTouchLocation = recognizer.\cf15 locationInView\cf0 (\cf11 self\cf0 .\cf14 view\cf0 )\
        \cf11 let\cf0  skTouchLocation = \cf11 self\cf0 .\cf15 convertPointFromView\cf0 (viewTouchLocation)\
        \cf11 let\cf0  velocity = recognizer.\cf15 velocityInView\cf0 (\cf11 self\cf0 .\cf14 view\cf0 )\
        \cf11 let\cf0  convertedVelocity = \cf15 CGPointMake\cf0 (velocity.\cf14 x\cf0 , -velocity.\cf14 y\cf0 )\
        \cf11 let\cf0  velocityNorm = \cf15 sqrt\cf0 (\cf15 pow\cf0 (convertedVelocity.\cf14 x\cf0 ,\cf17 2\cf0 ) + \cf15 pow\cf0 (convertedVelocity.\cf14 y\cf0 , \cf17 2\cf0 ))\
        \cf11 let\cf0  velocityUnitVector = \cf15 CGPointMake\cf0 (convertedVelocity.\cf14 x\cf0 /velocityNorm, convertedVelocity.\cf14 y\cf0 /velocityNorm)\
        \
        \cf11 if\cf0 (recognizer.\cf14 state\cf0  == \cf14 UIGestureRecognizerState\cf0 .\cf15 Began\cf0 )\
        \{\
            \cf11 if\cf0 (\cf12 _shooter\cf0 .\cf12 isMoving\cf0 )\
            \{\
                \cf11 return\cf0 \
            \}\
            \cf11 if\cf0 (\cf15 CGRectContainsPoint\cf0 (\cf12 _shooter\cf0 .\cf14 frame\cf0 , skTouchLocation))\
            \{\
                \cf11 let\cf0  shooterFrame = \cf14 SKSpriteNode\cf0 (imageNamed: \cf16 "shooter-frame"\cf0 )\
                shooterFrame.\cf14 position\cf0  = \cf12 _shooter\cf0 .\cf14 position\cf0 \
                shooterFrame.\cf14 name\cf0  = \cf16 "shooterFrame"\cf0 \
                shooterFrame.\cf14 size\cf0  = \cf15 CGSizeMake\cf0 (\cf12 _shooter\cf0 .\cf14 size\cf0 .\cf14 width\cf0  * \cf17 3\cf0 , \cf12 _shooter\cf0 .\cf14 size\cf0 .\cf14 height\cf0  * \cf17 3\cf0 )\
                \cf11 self\cf0 .\cf15 addChild\cf0 (shooterFrame)\
                \
                \cf12 _shooter\cf0 .\cf12 initialPosition\cf0  = \cf12 _shooter\cf0 .\cf14 position\cf0 \
                \cf11 if\cf0  (\cf13 anyObjectMoving\cf0 ())\
                \{\
                    \cf11 return\cf0 \
                \}\
                \cf12 _shooter\cf0 .\cf12 isPanned\cf0  = \cf11 true\cf0 \
                \cf12 _shooter\cf0 .\cf12 isMoving\cf0  = \cf11 false\cf0 \
            \}\
        \}\
        \cf11 else\cf0  \cf11 if\cf0  (recognizer.\cf14 state\cf0  == \cf14 UIGestureRecognizerState\cf0 .\cf15 Changed\cf0 )\
        \{\
            \cf11 if\cf0 (\cf12 _shooter\cf0 .\cf12 isPanned\cf0 )\
            \{\
                \
                \
                \cf18 //   _shooter.movingVector = pSub(skTouchLocation, _shooter.position)\
\cf0                 \cf12 _shooter\cf0 .\cf14 position\cf0  = skTouchLocation\
                \cf11 if\cf0 (\cf12 _shooter\cf0 .\cf14 position\cf0 .\cf14 y\cf0  < (\cf13 getMinY\cf0 () + \cf12 _shooter\cf0 .\cf14 size\cf0 .\cf14 height\cf0 /\cf17 2\cf0 ))\
                \{\
                    \cf12 _shooter\cf0 .\cf14 position\cf0 .\cf14 y\cf0  = \cf13 getMinY\cf0 () + \cf12 _shooter\cf0 .\cf14 size\cf0 .\cf14 height\cf0 /\cf17 2\cf0 \
                \}\
                \cf18 //                // print(String(format: "shooter position:(%.3f,%.3f)", Double(_shooter.position.x), Double(_shooter.position.y)))\
\cf0                 \
                \
                \cf11 let\cf0  pannedDistance = \cf15 sqrt\cf0 (\cf15 pow\cf0 ((\cf12 _shooter\cf0 .\cf14 position\cf0 .\cf14 x\cf0  - \cf12 _shooter\cf0 .\cf12 initialPosition\cf0 !.\cf14 x\cf0 ),\cf17 2\cf0 )+\cf15 pow\cf0 ((\cf12 _shooter\cf0 .\cf14 position\cf0 .\cf14 y\cf0  - \cf12 _shooter\cf0 .\cf12 initialPosition\cf0 !.\cf14 y\cf0 ),\cf17 2\cf0 ))\
                \cf18 //// println(String(format: "panned distance:%.3f", Double(pannedDistance)))\
\cf0                 \
                \
                \
                \cf18 //        // println(String(format: "scalar velocity:%.3f", Double(velocityNorm)))\
\cf0                 \
                \cf11 if\cf0  (pannedDistance > \cf17 300\cf0 )\
                \{\
                    \cf12 _shooter\cf0 .\cf12 isPanned\cf0  = \cf11 false\cf0 \
                    \cf12 _shooter\cf0 .\cf13 shoot\cf0 (\cf15 CGVectorMake\cf0 (velocityUnitVector.\cf14 x\cf0  * \cf17 2000\cf0 , velocityUnitVector.\cf14 y\cf0  * \cf17 2000\cf0 ))\
                    \cf15 // print\cf0 (\cf16 "you cannot pan the shooter all this distance"\cf0 )\
                \}\
                \
            \}\
        \}\
        \cf11 else\cf0  \cf11 if\cf0 (recognizer.\cf14 state\cf0  == \cf14 UIGestureRecognizerState\cf0 .\cf15 Ended\cf0 )\
        \{\
            \cf11 self\cf0 .\cf15 childNodeWithName\cf0 (\cf16 "shooterFrame"\cf0 )?.\cf15 removeFromParent\cf0 ()\
            \
            \cf11 if\cf0 (\cf12 _shooter\cf0 .\cf12 isPanned\cf0 )\
            \{\
                \cf15 // print\cf0 (\cf16 "shooter released: not panned, is moving"\cf0 )\
                \
                \cf12 _shooter\cf0 .\cf13 shoot\cf0 (\cf15 CGVectorMake\cf0 (convertedVelocity.\cf14 x\cf0  * \cf17 2\cf0 , convertedVelocity.\cf14 y\cf0  * \cf17 2\cf0 ))\
                \
            \}\
        \}\
    \}\
**********************\
From Episode create level by parsing xml file:\
\
    \cf11 func\cf0  levelLabelTabbed() ->\cf14 Void\cf0  \cf18 //not used\
\cf0     \{\
        \
        \cf18 /*\
        HRLevelScene* levelScene = [HRLevelScene sceneWithSize:self.size];\
        SKTransition* trans = [SKTransition pushWithDirection:SKTransitionDirectionLeft duration:0.5f];\
        [self.view presentScene:levelScene transition:trans];\
        */\cf0 \
        \cf12 SJDirector\cf0 .shared.\cf12 levelParser\cf0 .\cf13 parseXMLFile\cf0 (\cf16 "level0011"\cf0 )\
        \
        \cf11 let\cf0  levelScene:\cf12 SJLevelScene\cf0  = \cf12 SJLevelScene\cf0 (size: \cf11 self\cf0 .size)\
        \cf18 //   let sdfd: MenuScene = MenuScene(size: self.size)\
\cf0         \cf11 let\cf0  trans = \cf14 SKTransition\cf0 .\cf15 pushWithDirection\cf0 (\cf14 SKTransitionDirection\cf0 .\cf15 Left\cf0 , duration: \cf17 0.5\cf0 )\
        \cf11 self\cf0 .\cf14 view\cf0 ?.\cf15 presentScene\cf0 (levelScene, transition: trans)\
    \}}